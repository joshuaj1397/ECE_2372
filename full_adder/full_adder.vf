////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : full_adder.vf
// /___/   /\     Timestamp : 10/22/2016 13:00:49
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog C:/Users/Josh/Documents/ECE_2372/full_adder/full_adder.vf -w C:/Users/Josh/Documents/ECE_2372/full_adder/full_adder.sch
//Design Name: full_adder
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module full_adder(A0, 
                  A1, 
                  A2, 
                  A3, 
                  B0, 
                  B1, 
                  B2, 
                  B3, 
                  Cin, 
                  Cout, 
                  S0, 
                  S1, 
                  S2, 
                  S3);

    input A0;
    input A1;
    input A2;
    input A3;
    input B0;
    input B1;
    input B2;
    input B3;
    input Cin;
   output Cout;
   output S0;
   output S1;
   output S2;
   output S3;
   
   wire Cout0;
   wire XLXN_1;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_110;
   wire XLXN_111;
   wire XLXN_113;
   wire XLXN_116;
   wire XLXN_121;
   wire XLXN_122;
   wire XLXN_124;
   wire XLXN_127;
   wire XLXN_132;
   wire XLXN_133;
   wire XLXN_135;
   
   XOR2  XLXI_1 (.I0(B0), 
                .I1(A0), 
                .O(XLXN_1));
   XOR2  XLXI_2 (.I0(Cin), 
                .I1(XLXN_1), 
                .O(S0));
   AND2  XLXI_3 (.I0(XLXN_1), 
                .I1(Cin), 
                .O(XLXN_9));
   AND2  XLXI_4 (.I0(A0), 
                .I1(B0), 
                .O(XLXN_10));
   OR2  XLXI_5 (.I0(XLXN_10), 
               .I1(XLXN_9), 
               .O(Cout0));
   XOR2  XLXI_48 (.I0(B1), 
                 .I1(A1), 
                 .O(XLXN_110));
   AND2  XLXI_49 (.I0(XLXN_110), 
                 .I1(Cout0), 
                 .O(XLXN_111));
   XOR2  XLXI_50 (.I0(Cout0), 
                 .I1(XLXN_110), 
                 .O(S1));
   AND2  XLXI_51 (.I0(A1), 
                 .I1(B1), 
                 .O(XLXN_113));
   OR2  XLXI_52 (.I0(XLXN_113), 
                .I1(XLXN_111), 
                .O(XLXN_116));
   XOR2  XLXI_53 (.I0(B2), 
                 .I1(A2), 
                 .O(XLXN_121));
   AND2  XLXI_54 (.I0(XLXN_121), 
                 .I1(XLXN_116), 
                 .O(XLXN_122));
   XOR2  XLXI_55 (.I0(XLXN_116), 
                 .I1(XLXN_121), 
                 .O(S2));
   AND2  XLXI_56 (.I0(A2), 
                 .I1(B2), 
                 .O(XLXN_124));
   OR2  XLXI_57 (.I0(XLXN_124), 
                .I1(XLXN_122), 
                .O(XLXN_127));
   XOR2  XLXI_58 (.I0(B3), 
                 .I1(A3), 
                 .O(XLXN_132));
   AND2  XLXI_59 (.I0(XLXN_132), 
                 .I1(XLXN_127), 
                 .O(XLXN_133));
   XOR2  XLXI_60 (.I0(XLXN_127), 
                 .I1(XLXN_132), 
                 .O(S3));
   AND2  XLXI_61 (.I0(A3), 
                 .I1(B3), 
                 .O(XLXN_135));
   OR2  XLXI_62 (.I0(XLXN_135), 
                .I1(XLXN_133), 
                .O(Cout));
endmodule
